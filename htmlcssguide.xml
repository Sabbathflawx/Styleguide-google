<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="styleguide.xsl"?>
<GUIDE title="Google HTML/CSS 代码风格指南">
  <p class="revision">
    
    版本 2.23
  </p>
  
  <OVERVIEW>
    <CATEGORY title="重要提示">
      <STYLEPOINT title="在本文中显示隐藏的详情">
        <SUMMARY>
          本指南中包含很多隐藏起来的详情内容，它们通过三角形图标标记，如同你现在看到这行的左侧的图标。点击一下，您应该可以看到下面出现了一些文字。
        </SUMMARY>
        <BODY>
          <p>
            哇，现在你知道了你可以展开一个论点来查看它的细节。此外，在文章顶部还有一个“展开/折叠全部”的按钮。
          </p>
        </BODY>
      </STYLEPOINT>
    </CATEGORY>
    <CATEGORY title="背景">
      
      <p>
        这份文档定义了HTML和CSS的格式及风格上的规则。这样做的目标是提高协作，代码质量并使其支持基础架构。
        适用于HTML/CSS文件，包括GSS文件。 只要代码质量是可以被维护的，就能很好的被工具混淆、压缩和合并。
      </p>
      
      
    </CATEGORY>
  </OVERVIEW>

  <CATEGORY title="风格规则">
    <STYLEPOINT title="协议">
      <SUMMARY>
        从内置资源中隐藏协议。
      </SUMMARY>
      <BODY>
        <p>
          从指向图片和其他多媒体文件，样式，脚本的URL中隐藏协议部分(<code>http:</code>,<code>https:</code>)
          除那些通过这两个协议都不能被访问的文件外。
        </p>
        <p>
          省略协议-使URL成相对地址，防止内容混淆问题和导致小文件重复下载。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;script src="http://www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          .example {
            background: url(http://www.google.com/images/example);
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          .example {
            background: url(//www.google.com/images/example);
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    
  </CATEGORY>

  <CATEGORY title="格式规则">
    <STYLEPOINT title="缩进">
      <SUMMARY>
        每次缩进两个空格。
      </SUMMARY>
      <BODY>
        <p>
          不要用TAB键或混合TAB键和空格来进行缩进。
        </p>
        <CODE_SNIPPET>
          &lt;ul&gt;
            &lt;li&gt;Fantastic
            &lt;li&gt;Great
          &lt;/ul&gt;
        </CODE_SNIPPET>
        <CODE_SNIPPET>
          .example {
            color: blue;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="大小写">
      <SUMMARY>
        只用使用小写。
      </SUMMARY>
      <BODY>
        <p>
          所有的代码都用小写字母：适用于HTML元素名，属性，属性值（除了<code>text/CDATA</code> ）， 选择器，特性，特性值（除了字符串）。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;A HREF="/"&gt;Home&lt;/A&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;img src="google.png" alt="Google"&gt;
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          color: #E5E5E5;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          color: #e5e5e5;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="行尾空格">
      <SUMMARY>
        删除行尾空格。
      </SUMMARY>
      <BODY>
        <p>
          行尾空格没必要存在，还会使差异比较时变得复杂。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;p&gt;What?_
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;p&gt;Yes please.
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="Meta规则">
    <STYLEPOINT title="编码">
      <SUMMARY>
        使用UTF-8 (不带BOM头)。
      </SUMMARY>
      <BODY>
        <p>
          确保你的编辑器用没有字节顺序标记的UTF-8编码格式进行编写。
        </p>
        <p>
          在HTML模板和文件中通过<code>&lt;meta charset="utf-8"&gt;</code>指定编码格式。不需要制定样式表的编码，假定都为UTF-8。
        </p>
        <p>
        （更多关于编码和何时及怎样指定它，请查看 <a href="http://www.w3.org/International/tutorials/tutorial-char-enc/">Handling character encodings in HTML and CSS</a>。）
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="注释">
      <SUMMARY>
        在需要的，合理的地方解释你写的代码。
      </SUMMARY>
      <BODY>
        <p>
          用注释来解释代码：它包括什么，它的目的是什么，它能做什么，为什么使用这个解决方案，还是说只是因为偏爱如此呢？
        </p>
        <p>
          (本规则可选，没必要每份代码都描述的很充分，它会增重HTML和CSS的代码。这取决于该项目的复杂程度。)
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="处理项">
      <SUMMARY>
        用 <code>TODO</code> 标记代办事项和正活动的条目。
      </SUMMARY>
      <BODY>
        <p>
          只用 <code>TODO</code> 来强调代办事项， 不要用其他的常见格式，例如 <code>@@</code> 。
        </p>
        <p>
          用圆括号起来的，诸如<code>TODO(contact)</code> 这样的格式，附加联系方式（用户名或电子邮件列表）。
        </p>
        <p>
          可在冒号之后附加活动条目说明等，例如 <code>TODO: action item</code> 。
        </p>
        
        <CODE_SNIPPET>
          {# TODO(john.doe): revisit centering #}
          &lt;center&gt;Test&lt;/center&gt;
        </CODE_SNIPPET>
        
        <CODE_SNIPPET>
          &lt;!-- TODO: remove optional tags --&gt;
          &lt;ul&gt;
            &lt;li&gt;Apples&lt;/li&gt;
            &lt;li&gt;Oranges&lt;/li&gt;
          &lt;/ul&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="HTML风格规则">
    <STYLEPOINT title="文档类型">
      <SUMMARY>
        使用HTML5。
      </SUMMARY>
      <BODY>
        <p>
          优先为所有HTML文档使用HTML5 (HTML语法) :<code>&lt;!DOCTYPE html&gt;</code>.
        </p>
        <p>
          （推荐用HTML文本文档格式，即 <code>text/html</code> . 不要用 XHTML。 XHTML格式，即 <a href="http://hixie.ch/advocacy/xhtml"><code>application/xhtml+xml</code></a> , 
          缺少浏览器和基础设施的支持，还比HTML能优化的空间要少一些。用更多的存储空间。）
        </p>
        <p>
          虽说对于HTML来说是没问题的，但不要关闭空元素，例如，这样写<code>&lt;br&gt;</code>，而不是<code>&lt;br /&gt;</code>。
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="HTML代码有效性">
      <SUMMARY>
        尽量使用有效的HTML。
      </SUMMARY>
      <BODY>
        <p>
          编写有效的HTML代码，除非没可能处理文件大小时有其他方面的难以达到的性能目标。
        </p>
        
        <p>
          使用如<a href="http://validator.w3.org/nu/">W3C HTML validator</a>之类的工具进行测试。
        </p>
        <p>
          HTML代码有效性是重要的质量衡量标准，并可确保HTML代码可以正确使用。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;title&gt;Test&lt;/title&gt;
          &lt;article&gt;This is only a test.
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;meta charset="utf-8"&gt;
          &lt;title&gt;Test&lt;/title&gt;
          &lt;article&gt;This is only a test.&lt;/article&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="语义">
      <SUMMARY>
        根据HTML各个元素的用途而去使用它们。
      </SUMMARY>
      <BODY>
        <p>
          使用元素 (有时候错称其为“标签”) 要知道它们创建的目的是什么。 例如，用heading元素构造标题， <code>p</code> 元素构造段落, <code>a</code> 元素构造锚点等。
        </p>
        <p>
          根据HTML各个元素的用途而去使用是很重要的，它涉及到文档的可访问性、重用和代码效率等问题。
        </p>
        
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;div onclick="goToRecommendations();"&gt;All recommendations&lt;/div&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;a href="recommendations/"&gt;All recommendations&lt;/a&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="多媒体后备">
      <SUMMARY>
        为多媒体提供备选内容。
      </SUMMARY>
      <BODY>
        <p>
        	对于多媒体，如图像，视频，通过 <code>canvas</code> 读取的动画对象，确保提供备选方案。 对于图像使用有意义的备选文本（ <code>alt</code> ），对于视频和音频使用有效的字幕和文字说明。
        </p>
        <p>
          提供备选内容是很重要的，原因：给盲人用户以一些提示性的文字，用 <code>@alt</code> 告诉他这图像是关于什么的，还有一些其他用户可能没有办法来知道视频或音频内容是什么。
        </p>
        <p>
          （图像的 <code>alt</code> 属性会产生冗余，对那些目的是纯粹地装饰性的图片，你不能立即为它使用CSS，使用没有显示时的替代文本，如<code>alt=""</code>。)
        </p>
        
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;img src="spreadsheet.png"&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;img src="spreadsheet.png" alt="Spreadsheet screenshot."&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>

    <STYLEPOINT title="关注点分离">
      <SUMMARY>
        将展现和行为分开。
      </SUMMARY>
      <BODY>
        <p>
          严格保持结构 （标记），表现 （样式），和行为 （脚本）分离, 并尽量让这三者之间的交互保持最低限度。
        </p>
        <p>
          是的，确保文档和模板只包含HTML。HTML的唯一目的是为结构服务， 把所有表现都放到样式表里，把所有行为都放到脚本里。
        </p>
        <p>
          此外，尽量使脚本和样式表在文档与模板中有最小接触面积，即减少外链。
        </p>
        <p>
          将结构，表现和行为分开对于维护是很重要的，因为更改HTML文档结构和模板会比更新样式表和脚本更花费成本。
        </p>
        
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;HTML sucks&lt;/title&gt;
          &lt;link rel="stylesheet" href="base.css" media="screen"&gt;
          &lt;link rel="stylesheet" href="grid.css" media="screen"&gt;
          &lt;link rel="stylesheet" href="print.css" media="print"&gt;
          &lt;h1 style="font-size: 1em;"&gt;HTML sucks&lt;/h1&gt;
          &lt;p&gt;I’ve read about this on a few sites but now I’m sure:
            &lt;u&gt;HTML is stupid!!1&lt;/u&gt;
          &lt;center&gt;I can’t believe there’s no way to control the styling of
            my website without doing everything all over again!&lt;/center&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;My first CSS-only redesign&lt;/title&gt;
          &lt;link rel="stylesheet" href="default.css"&gt;
          &lt;h1&gt;My first CSS-only redesign&lt;/h1&gt;
          &lt;p&gt;I’ve read about this on a few sites but today I’m actually
            doing it: separating concerns and avoiding anything in the HTML of
            my website that is presentational.
          &lt;p&gt;It’s awesome!
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="实体引用">
      <SUMMARY>
        不要使用实体引用。
      </SUMMARY>
      <BODY>
        <p>
          不需要使用类似 <code>&amp;mdash;</code> 、 <code>&amp;rdquo;</code> 或 <code>&amp;#x263a;</code> 等的实体引用, 假定团队中所用的文件和编辑器是同一编码（UTF-8）。
        </p>
        <p>
          唯一的特例是在HTML中有特殊含义的字符(如<code>&lt;</code> 和 <code>&amp;</code>)，还有 “不可见” 字符 （例如no-break空格）。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          The currency symbol for the Euro is &amp;ldquo;&amp;eur;&amp;rdquo;.
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          The currency symbol for the Euro is “€”.
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="可选标签">
      <SUMMARY>
        省略可选标签（可选）。
      </SUMMARY>
      <BODY>
        <p>
          出于优化文件大小和可校验的目的， 可以考虑省略可选标签。
          <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#syntax-tag-omission">HTML5 specification</a>定义了哪些是可省略标签。
        </p>
        <p>
          （这种方法可能需要一个宽限期才能被建立，就如同不同的开发者遵守他的编程规范指南一样。考虑到一致性和简洁的原因，最好是省略所有可选标记，而不仅仅是一个选择。）
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;html&gt;
            &lt;head&gt;
              &lt;title&gt;Spending money, spending bytes&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
              &lt;p&gt;Sic.&lt;/p&gt;
            &lt;/body&gt;
          &lt;/html&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;Saving money, saving bytes&lt;/title&gt;
          &lt;p&gt;Qed.
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="type 属性">
      <SUMMARY>
        省略样式表和脚本的<code>type</code>属性。
      </SUMMARY>
      <BODY>
        <p>
          不用为样式表(除非不是使用CSS)和脚本(除非不是使用JavsScript)使用<code>type</code>属性。
        </p>
        <p>
        	指定这些内容的<code>type</code>属性是不必要的，
        	HTML5暗含<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#attr-style-type"><code>text/css</code></a>
        	和<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#attr-script-type"><code>text/javascript</code></a>
        	作为默认。这样做对那些老旧版本的浏览器来说也是安全的。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;link rel="stylesheet" href="//www.google.com/css/maia.css"
            type="text/css"&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;link rel="stylesheet" href="//www.google.com/css/maia.css"&gt;
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"
            type="text/javascript"&gt;&lt;/script&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="HTML格式规则">
    <STYLEPOINT title="格式">
      <SUMMARY>
        为每个块，列表，table元素使用单独一行，并作为子元素进行缩进。
      </SUMMARY>
      <BODY>
        <p>
          独立的元素样式（因为CSS允许在每一个分辨率下呈现不同的规则), 将块元素、列表元素或表格元素都放在新行。
        </p>
        <p>
          另外，缩进块元素、列表元素或表格元素的子元素。
        </p>
        <p>
          （如果你陷入到列表项的两侧空白的问题中，可以将所有的<code>li</code>元素放在一行中。
          linter对于抛出一个警告而不是一个错误来说已经足够了。)
        </p>
        <CODE_SNIPPET>
          &lt;blockquote&gt;
            &lt;p&gt;&lt;em&gt;Space&lt;/em&gt;, the final frontier.&lt;/p&gt;
          &lt;/blockquote&gt;
        </CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;ul&gt;
            &lt;li&gt;Moe
            &lt;li&gt;Larry
            &lt;li&gt;Curly
          &lt;/ul&gt;
        </CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;table&gt;
            &lt;thead&gt;
              &lt;tr&gt;
                &lt;th scope="col"&gt;Income
                &lt;th scope="col"&gt;Taxes
            &lt;tbody&gt;
              &lt;tr&gt;
                &lt;td&gt;$ 5.00
                &lt;td&gt;$ 4.50
          &lt;/table&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="HTML 引号">
      <SUMMARY>
        当引用属性值时，使用双引号。
      </SUMMARY>
      <BODY>
        <p>
          在属性值两边使用双引号(<code>""</code>)而不是单引号(<code>''</code>)。
        </p>
        <BAD_CODE_SNIPPET>
          &lt;!-- Not recommended --&gt;
          &lt;a class='maia-button maia-button-secondary'&gt;Sign in&lt;/a&gt;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          &lt;!-- Recommended --&gt;
          &lt;a class="maia-button maia-button-secondary"&gt;Sign in&lt;/a&gt;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="CSS风格规则">
    <STYLEPOINT title="CSS代码有效性">
      <SUMMARY>
        尽量使用有效的CSS。
      </SUMMARY>
      <BODY>
        <p>
          使用有效的CSS代码，除非是处理CSS校验器程序错误或者需要专有语法。
        </p>
        
        <p>
          使用诸如<a href="http://jigsaw.w3.org/css-validator/">W3C SS validator</a>之类的工具进行测试。
        </p>
        <p>
        	使用有效的CSS是重要的质量衡量标准，如果发现有的CSS代码没有任何效果的可以删除，确保CSS用法适当。
        </p>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="ID和Class的命名">
      <SUMMARY>
        为ID和class使用有意义的或通用的名字。
      </SUMMARY>
      <BODY>
        <p>
          应该从ID和class的名字上就能看出这元素是干什么用的，而不是表象或模糊不清的命名。或者是在其他方面通用的。
        </p>
        <p>
          明确的和能够反映元素目的的名字应该被优选考虑，因为它们更容易被理解，可能更少被修改。
        </p>
        <p>
          通用名称可以加在兄弟元素都不特殊或没有个别意义的元素上，通常类似“helpers”。
        </p>
        <p>
          使用功能性或通用的名字会减少不必要的文档或模板修改。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended: meaningless */
          #yee-1901 {}

          /* Not recommended: presentational */
          .button-green {}
          .clear {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended: specific */
          #gallery {}
          #login {}
          .video {}

          /* Recommended: generic */
          .aux {}
          .alt {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="ID和Class命名风格">
      <SUMMARY>
        非必要的情况下，ID和class的名称应尽量简短。
      </SUMMARY>
      <BODY>
        <p>
          简要传达ID或class是关于什么的。
        </p>
        <p>
          通过这种方式，似的代码易懂且高效。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          #navigation {}
          .atr {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          #nav {}
          .author {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>

    <STYLEPOINT title="类型选择器">
      <SUMMARY>
        避免通过类型选择器类排列ID和Class的名字。
      </SUMMARY>
      <BODY>
        <p>
          除非是必要的(如helper类)，不要把元素名与ID或Class名字设置成一样的。
        </p>
        <p>
          出于<a href="http://www.stevesouders.com/blog/2009/06/18/simplifying-css-selectors/">性能上的考虑</a>避免使用父辈节点做选择器。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          ul#example {}
          div.error {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          #example {}
          .error {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="速记属性">
      <SUMMARY>
        尽可能使用速记属性。
      </SUMMARY>
      <BODY>
        <p>
          应该尽可能的使用CSS提供的<a href="http://www.w3.org/TR/CSS21/about.html#shorthand">速记</a>属性(如<code>font</code>)，
          即使是在仅设置一个值的情况下。
        </p>
        <p>
          使用速记属性对于代码功效和易读性是非常有用的。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          border-top-style: none;
          font-family: palatino, georgia, serif;
          font-size: 100%;
          line-height: 1.6;
          padding-bottom: 2em;
          padding-left: 1em;
          padding-right: 1em;
          padding-top: 0;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          border-top: 0;
          font: 100%/1.6 palatino, georgia, serif;
          padding: 0 1em 2em;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="0和单位">
      <SUMMARY>
        在“0”值之后省略单位名称。
      </SUMMARY>
      <BODY>
        <p>
          不要在<code>0</code>值之后使用单位，除非它们是必需的。
        </p>
        <CODE_SNIPPET>
          margin: 0;
          padding: 0;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="0开头的小数">
      <SUMMARY>
        省略“0”值开头的小数。
      </SUMMARY>
      <BODY>
        <p>
          不要在值或长度在-1到1之间的值的前面使用<code>0</code>（小数不要小数点前的0）。
        </p>
        <CODE_SNIPPET>
          font-size: .8em;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="十六进制">
      <SUMMARY>
        尽可能的使用3个字符的十六进制计数法。
      </SUMMARY>
      <BODY>
        <p>
          在color值中使用3字符的十六进制计数法，这样更简短明了。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          color: #eebbcc;
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          color: #ebc;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="前缀">
      <SUMMARY>
        选择器前面加上特殊应用标识的前缀（可选）。
      </SUMMARY>
      <BODY>
        <p>
          大型项目中最好在ID或class名字前加上这种标识性前缀（命名空间），使用短破折号连接。
        </p>
        
        
        <p>
          使用命名空间可以防止命名冲突，方便维护，比如在搜索和替换操作上。
        </p>
        <CODE_SNIPPET>
          .adw-help {} /* AdWords */
          #maia-note {} /* Maia */
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="ID和lass名称中的分隔符">
      <SUMMARY>
        在ID和class名字中通过短破折号“-”分隔多个单词。
      </SUMMARY>
      <BODY>
        <p>
          别在选择器名字里用短破折号“-”以外的连接词(包括啥也没有)， 以增进对名字的理解和查找。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended: does not separate the words “demo” and “image” */
          .demoimage {}

          /* Not recommended: uses underscore instead of hyphen */
          .error_status {}
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          #video-id {}
          .ads-sample {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="Hacks">
      <SUMMARY>
        像避免使用CSS “hacks”一样避免用户代理检测 —— 请先尝试使用其他的解决方法。
      </SUMMARY>
      <BODY>
        <p>
          It’s tempting to address styling differences over user
          agent detection or special CSS filters, workarounds, and
          hacks. Both approaches should be considered last resort in
          order to achieve and maintain an efficient and manageable
          code base. Put another way, giving detection and hacks a
          free pass will hurt projects in the long run as projects
          tend to take the way of least resistance. That is, allowing
          and making it easy to use detection and hacks means using
          detection and hacks more frequently—and more frequently
          is too frequently.
        </p>
        
        
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="CSS格式规则">
    <STYLEPOINT title="声明顺序">
      <SUMMARY>
        按字母顺序排列声明。
      </SUMMARY>
      <BODY>
        <p>
          把声明按字母顺序排列以便使用一种方式取得一致的代码，可以更容易记住和维护。
        </p>
        <p>
          忽略浏览器的特定前缀排序，但多浏览器特定的某个CSS属性前缀应相对保持排序（例如-moz前缀在-webkit前面）。
        </p>
        <CODE_SNIPPET>
          background: fuchsia;
          border: 1px solid;
          -moz-border-radius: 4px;
          -webkit-border-radius: 4px;
          border-radius: 4px;
          color: black;
          text-align: center;
          text-indent: 2em;
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="块状内容缩进">
      <SUMMARY>
        缩进所有块状内容。
      </SUMMARY>
      <BODY>
        <p>
          缩进所有<a href="http://www.w3.org/TR/CSS21/syndata.html#block">块状内容</a>，它和声明是一样的规则，如此可反映层次关系和更容易理解。

        </p>
        <CODE_SNIPPET>
          @media screen, projection {

            html {
              background: #fff;
              color: #444;
            }

          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="声明结束">
      <SUMMARY>
        在每个声明结束之后使用一个分号。
      </SUMMARY>
      <BODY>
        <p>
          考虑到一致性和拓展性，请在每个声明尾部都加上分号。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          .test {
            display: block;
            height: 100px
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          .test {
            display: block;
            height: 100px;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="属性名结束">
      <SUMMARY>
        在属性名冒号后加一个空格。
      </SUMMARY>
      <BODY>
        <p>
          为保持一致性，总是在属性和值之间使用一个空格(但不要在属性和冒号之间空格)。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          h3 {
            font-weight:bold;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          h3 {
            font-weight: bold;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="声明块间隔">
      <SUMMARY>
        在最后一个选择器与定义块之间使用一个空格。
      </SUMMARY>
      <BODY>
        <p>
          总是在最后一个选择器和开大括号之间使用一个空格，然后再开始<a href="http://www.w3.org/TR/CSS21/syndata.html#rule-sets">声明块</a>
        </p>
        <p>
          开大括号应该和最后一个选择器待在一行。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended: missing space */
          #video{
            margin-top: 1em;
          }

          /* Not recommended: unnecessary line break */
          #video
          {
            margin-top: 1em;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          #video {
            margin-top: 1em;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="选择器和声明间隔">
      <SUMMARY>
        通过新行分隔选择器和声明定义。
      </SUMMARY>
      <BODY>
        <p>
          每个选择器和声明另起一行。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          a:focus, a:active {
            position: relative; top: 1px;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          h1,
          h2,
          h3 {
            font-weight: normal;
            line-height: 1.2;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="规则间隔">
      <SUMMARY>
        通过新航分隔规则。
      </SUMMARY>
      <BODY>
        <p>
          在两个规则之间空一行。
        </p>
        <CODE_SNIPPET>
          html {
            background: #fff;
          }

          body {
            margin: auto;
            width: 50%;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
    <STYLEPOINT title="CSS中引号">
      <SUMMARY>
        为属性选择器和属性值使用单引号。
      </SUMMARY>
      <BODY>
        <p>
          为属性选择器或属性值使用单引号(<code>''</code>)，而不是双引号(<code>""</code>)。不要在URI值(<code>url()</code>)中使用引号。
        </p>
        <p>
          特例：如果你需要使用<code>@charset</code>规则，使用双引号-<a href="http://www.w3.org/TR/CSS21/syndata.html#charset">single
          quotation marks are not permitted</a>。
        </p>
        <BAD_CODE_SNIPPET>
          /* Not recommended */
          @import url("//www.google.com/css/maia.css");

          html {
            font-family: "open sans", arial, sans-serif;
          }
        </BAD_CODE_SNIPPET>
        <CODE_SNIPPET>
          /* Recommended */
          @import url(//www.google.com/css/maia.css);

          html {
            font-family: 'open sans', arial, sans-serif;
          }
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  <CATEGORY title="CSS Meta 规则">
    
    <STYLEPOINT title="片段注释">
      <SUMMARY>
        通过章节注释来分组不同章节(可选)。
      </SUMMARY>
      <BODY>
        <p>
          如果可能，通过注释将样式表的不同片段进行分组。不同章节之间空一行。
        </p>
        <CODE_SNIPPET>
          /* Header */

          #adw-header {}

          /* Footer */

          #adw-footer {}

          /* Gallery */

          .adw-gallery {}
        </CODE_SNIPPET>
      </BODY>
    </STYLEPOINT>
  </CATEGORY>

  

  <PARTING_WORDS>
    <p>
      <em>请保持一致性.</em>
    </p>
    <p>
      如果你正在编写代码，花几分钟看一下你的代码，然后决定它的风格。如果它们在所有的算术操作符两边使用空格，那么你也应该这么做。如果它们的注释都使用码标线包住，请确认你也这么做。
    </p>
    <p>
      制定风格指南的目的是让编码有一个共同的词汇表，这样就可以让其他人关注你讲的是什么，而不是你是如何讲的。 我们在这里推出一个全局的样式规则就是让人们知道这些词汇表，但是你们自己制定的样式同样重要。 如果你添加到一个文件中的代码和已经存在的代码风格截然不同，它会让阅读代码的人不知所措，避免这种情况。
    </p>
    <p>
    	【重要提示】：本文由英文翻译而来，在翻译的过程中由于英文水平和技术水平的限制，难免会出现不准确或错误。在你阅读本文的时候如果遇到不懂，不理解的情况，请参阅<a href='http://google.github.io/styleguide/htmlcssguide.xml'>英文版</a>。 同时，欢迎你指出错误，以便让此文更好，先谢过。
    </p>
  </PARTING_WORDS>

  <p align="right">
    Revision 2.23
  </p>

</GUIDE>
